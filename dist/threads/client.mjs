var e=null,t=new Map;async function v(r={}){if(typeof window>"u"||!("serviceWorker"in navigator))throw new Error("Service Workers are not supported in this environment");let{workerPath:n="/worker.js",scope:s="/",type:o="classic"}=r;try{return e=await navigator.serviceWorker.register(n,{scope:s,type:o}),navigator.serviceWorker.addEventListener("message",i=>{let{threadName:a,data:u}=i.data,c=t.get(a);c&&(c(u),t.delete(a))}),e}catch(i){throw new Error(`Failed to register service worker: ${i}`)}}function d(){if(!e)throw new Error("Service worker not registered. Call registerThreads() first.");let r=e.active||e.waiting||e.installing;if(!r)throw new Error("No active service worker found");return r}function w(r){return{execute(n){return d().postMessage({threadName:r,data:n}),{finish(o){t.set(r,o)}}}}}function l(){return typeof window<"u"&&"serviceWorker"in navigator}function f(){return e}async function k(){if(!e)return!1;let r=await e.unregister();return e=null,t.clear(),r}export{f as getRegistration,l as isServiceWorkerSupported,v as registerThreads,w as thread,k as unregisterThreads};
