var e=null,t=new Map;async function g(r={}){if(typeof window>"u"||!("serviceWorker"in navigator))throw new Error("Service Workers are not supported in this environment");let{workerPath:n="/worker.js",scope:a="/",type:i="classic"}=r;try{return e=await navigator.serviceWorker.register(n,{scope:a,type:i}),navigator.serviceWorker.addEventListener("message",o=>{let{threadName:s,data:c}=o.data,d=t.get(s);d&&(d(c),t.delete(s))}),e}catch(o){throw new Error(`Failed to register service worker: ${o}`)}}function p(){if(!e)throw new Error("Service worker not registered. Call registerThreads() first.");let r=e.active||e.waiting||e.installing;if(!r)throw new Error("No active service worker found");return r}function v(r){return{execute(n){return p().postMessage({threadName:r,data:n}),{finish(i){t.set(r,i)}}}}}function l(){return typeof window<"u"&&"serviceWorker"in navigator}function T(){return e}async function w(){if(!e)return!1;let r=await e.unregister();return e=null,t.clear(),r}export{T as getRegistration,l as isServiceWorkerSupported,g as registerThreads,v as thread,w as unregisterThreads};
